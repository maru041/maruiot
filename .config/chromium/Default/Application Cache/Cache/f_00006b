
<!DOCTYPE html>
<html manifest="https://main.servicebus.ext.azure.com/?feature.appcache=true&amp;l=ja.ja">
<head>
    <title>ServiceBusExtension</title>
    
<meta charset='utf-8' />
<meta http-equiv='X-UA-Compatible' content='IE=edge' />
<meta name='msapplication-config' content='none' />
<link rel='icon' type='image/x-icon' href='/favicon.ico' />
<link rel='shortcut icon' type='image/x-icon' href='/favicon.ico' />
<meta name='robots' content='noindex, nofollow' />

</head>
<body>
    <script>/// <reference path="../Definitions/FxEnvironment.d.ts" />
/* tslint:disable:no-unused-expression */
(function (input) {
    "use strict";
    var global = window;
    var fx = global.fx;
    if (!fx) {
        global.fx = fx = {};
    }
    var env = fx.environment;
    if (typeof input === "string") {
        input = JSON.parse(input);
    }
    if (!env) {
        env = fx.environment = input;
    }
    else {
        Object.keys(input).forEach(function (prop) {
            if (env[prop] === undefined) {
                env[prop] = input[prop];
            }
        });
    }
    // inject session id from the hash if it wasn't already defined
    if (!env.sessionId) {
        var hash = global.location.hash || "";
        var qIndex = hash.indexOf("?");
        if (qIndex === -1) {
            qIndex = hash.length;
        }
        env.sessionId = hash.substring(1, qIndex);
    }
})({"pageVersion":"2.16.50957.3","sdkVersion":"5.0.302.737 (production_sdk#c050377.170502-1521)","version":"2.16.50957.3","applicationPath":"/","bootMessageSignature":"###BOOT###","bootGetConst":"BOOTgetScripts;","bootReturnConst":"BOOTreturn;","cdn":{"disableParameter":"nocdn","enabled":true,"errorPageUri":"","forceDisable":false,"index":-1,"indexParameter":"cdnIndex","forceIndex":null,"bundling":"Default"},"clientTraceUri":"/api/ClientTrace","contentLocations":"None","contentUriBasePath":"/","contentVersionToken":"2.16.50957.3","effectiveLocale":"ja.ja","errorPageUri":"/Error","extensionFlags":{},"features":{},"query":{"region":"japaneast","cacheVersion":"0","defaultCloudName":"azure","extensionName":"Microsoft_Azure_ServiceBus","traceStr":"","sessionId":"cdf7410c6e6640cc81c90a0a209400ab","pageVersion":"2.16.50957.3","l":"ja.ja","trustedAuthority":"portal.azure.com"},"isDevelopmentMode":false,"isRtl":false,"telemetryUri":"/api/Telemetry","trustedParentOrigin":"https://portal.azure.com","userTypeHint":"","versionedContentRoots":["/content","/scripts"],"crossOriginTraces":true,"requireConfig":{"baseUrl":"/Content/2.16.50957.3/min/Scripts","waitSeconds":30.0,"deps":["_generated/Manifest"],"bundles":{"*ServieBusExtension":["ClientResources"],"*0_generated/Manifest":["_generated/Manifest"]},"shim":{"_generated/Manifest":["**Shim_//main.servicebus.ext.azure.com/Content/Dynamic/TypeMetadataScript_0560AC00ECF6B7F530CED8E89BAC07A931017A5B"]},"paths":{"**Shim_//main.servicebus.ext.azure.com/Content/Dynamic/TypeMetadataScript_0560AC00ECF6B7F530CED8E89BAC07A931017A5B":["//main.servicebus.ext.azure.com/Content/Dynamic/TypeMetadataScript_0560AC00ECF6B7F530CED8E89BAC07A931017A5B"],"*ServieBusExtension":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdResourceDefinition_145D0EBB8AA9C8D8308F4F24ED31B1529C73B6E0.js?c1=ja\u0026root=ServieBusExtension"],"**0_generated/Manifest":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_BB7B50F3D86905D13FAB9C9002B4F8EB1D84D011.js?root=**0_generated/Manifest"],"*0_generated/Manifest":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_0ECDC1032929E8A33DB8BED20217DBC3E8B1037D.js?root=*0_generated/Manifest\u0026emitMap=0"],"*_generated/Microsoft_Azure_Insights/BladeReferences":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_639AA7B1CD0E8F2EAA03DE0E5210D2C117950B3D.js?root=*_generated/Microsoft_Azure_Insights/BladeReferences"],"*_generated/HubsExtension/BladeReferences":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_BB5D1E24BD4C7AA0542D94DC70E6CE245CB4B4A8.js?root=*_generated/HubsExtension/BladeReferences"],"**_generated/BladeReferences":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_1F263614FA67D125B7592D8A45EA07EE9F3CDB40.js?root=**_generated/BladeReferences"],"**_generated/Parts/TopicResourcePart":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_F5F187BF4CB8F119651018D63905187A78801F1E.js?root=**_generated/Parts/TopicResourcePart"],"*_generated/Parts/TopicResourcePart":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_566797F303594C815F9E6B537A2BAABEDD083DB0.js?root=*_generated/Parts/TopicResourcePart"],"*_generated/Parts/ResourcePart":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_79A9B3CC316A4095F0601B9DDE6635E5D18B31E5.js?root=*_generated/Parts/ResourcePart"],"*_generated/Parts/QuickStartPart":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_F056A2CE66888C9306B3E188FD94A18B522B4767.js?root=*_generated/Parts/QuickStartPart"],"*_generated/Parts/QueueResourcePart":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_E08A4DC5613C859F50D9F6475FCADEF23CE2DE3E.js?root=*_generated/Parts/QueueResourcePart"],"*_generated/Blades/TsNoticeBlade":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_747B29E063809F88BABA0A89C4E9565B0106EB26.js?root=*_generated/Blades/TsNoticeBlade"],"**_generated/Blades/TopicSummaryBlade":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_780CC490CA80F07F0C6C4F40EC8A2D05E7FE6AC0.js?root=**_generated/Blades/TopicSummaryBlade"],"*_generated/Blades/TopicSummaryBlade":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_DDCFEFC3918A3B3EC092CE5F33EB614CB7E1866F.js?root=*_generated/Blades/TopicSummaryBlade"],"*_generated/Blades/TopicPropertiesBlade":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_4193AC2EE116E1B0A101BBF28BB9379A85D15223.js?root=*_generated/Blades/TopicPropertiesBlade"],"**_generated/Blades/TopicListBlade":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_7D1ACCD26AC53443AC2077C4E6DD546ECF73BCB3.js?root=**_generated/Blades/TopicListBlade"],"*_generated/Blades/TopicListBlade":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_873B75BA3C2B32FFA86846BA7764BADB0AD84022.js?root=*_generated/Blades/TopicListBlade"],"*_generated/Blades/SubscriptionPropertiesBlade":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_918386BB9F2231D9B6FD04121F314FF86965344D.js?root=*_generated/Blades/SubscriptionPropertiesBlade"],"*_generated/Blades/SubscriptionListBlade":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_935D37E9674861C99C7BD152768BACF7C995651F.js?root=*_generated/Blades/SubscriptionListBlade"],"*_generated/Blades/ScaleSettingBlade":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_7F75EA1BB29322D6C6B2A5000E9FEBA1F3A29CD5.js?root=*_generated/Blades/ScaleSettingBlade"],"*_generated/Blades/SasPolicyListBlade":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_42DA79E4EEA1BC56015403C8E5D7FAF0584D5188.js?root=*_generated/Blades/SasPolicyListBlade"],"*_generated/Blades/SasPolicyDetailsBlade":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_3B46A6410001BFAE0E8534FBBF02CB30757D0FC3.js?root=*_generated/Blades/SasPolicyDetailsBlade"],"**_generated/Blades/ResourceBlade":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_C569E26397200051113E0864755E933AFF626C2F.js?root=**_generated/Blades/ResourceBlade"],"*_generated/Blades/ResourceBlade":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_DECC3CC063DD5D59D3F11DDD29A263B8084FBB25.js?root=*_generated/Blades/ResourceBlade"],"*_generated/Blades/QuickStartBlade":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_890C53DF00AA8E2901376D0215ADB59E2EF1112A.js?root=*_generated/Blades/QuickStartBlade"],"*_generated/Blades/QueueSummaryBlade":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_36BB765711DCD82E840A7294F69DD01AFE2B67F5.js?root=*_generated/Blades/QueueSummaryBlade"],"*_generated/Blades/QueuePropertiesBlade":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_D8957793C6F993303692F237A6AC170746FEB8E1.js?root=*_generated/Blades/QueuePropertiesBlade"],"*_generated/Blades/QueueListBlade":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_F17AEC349274EEDE4491D2A3BB8CA830077A92FA.js?root=*_generated/Blades/QueueListBlade"],"*_generated/Blades/PropertiesBlade":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_AD18A709EDEBFD915B5D439B1F4929FC89900CDB.js?root=*_generated/Blades/PropertiesBlade"],"*_generated/Blades/PriceTierSpecPickerBlade":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_A2ED29B369D72AE8E081406DC02012C19A1C754C.js?root=*_generated/Blades/PriceTierSpecPickerBlade"],"*_generated/Blades/EventHubNoticeBlade":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_1A84320AE281BC747988889EDB369F2A9533B40C.js?root=*_generated/Blades/EventHubNoticeBlade"],"*_generated/Blades/DeleteBlade":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_A2F28C3A0C43051FA873D1F657AF4C3D66B83FAE.js?root=*_generated/Blades/DeleteBlade"],"**_generated/Blades/CreateTopicBlade":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_B295120C87FD2EA29262D57473586A4228C0B5AF.js?root=**_generated/Blades/CreateTopicBlade"],"*_generated/Blades/CreateTopicBlade":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_939F2C9640EBC3C44603558234A642B8722AE4C2.js?root=*_generated/Blades/CreateTopicBlade"],"*_generated/Blades/CreateSubscriptionBlade":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_BB4D1E6982905EF9579A94876CD853772FB7D1CC.js?root=*_generated/Blades/CreateSubscriptionBlade"],"*_generated/Blades/CreateQueueBlade":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_25B6DACC7C6D91FD0EFD3EDEA6F5612DB42F2940.js?root=*_generated/Blades/CreateQueueBlade"],"*_generated/Blades/CreateBlade":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_60E77CAFC4496074F3681A5FE3902E3927AD28BE.js?root=*_generated/Blades/CreateBlade"],"*_generated/Blades/ConvertBlade":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_227F54950F5B85618557E88815E7E322F6C56B26.js?root=*_generated/Blades/ConvertBlade"],"*_generated/Blades/AddSasPolicyBlade":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_D52E3C8D4D9CB9C97629A3A949A90A45F3602641.js?root=*_generated/Blades/AddSasPolicyBlade"],"*QuickStart/QuickStartArea":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_738A4EFC11DCBD071B4C74B6DDA1CEA008609741.js?root=*QuickStart/QuickStartArea"],"*Program":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_C323730B2E4D7FB7A9942690CE8BFFCE1ECACA89.js?root=*Program"],"*Namespace/Summary/ViewModels/ResourceBladeToolbarPartViewModel":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_979D84F41C3BC0970D7E1CB31CE4194AD2EC1CD5.js?root=*Namespace/Summary/ViewModels/ResourceBladeToolbarPartViewModel"],"*Namespace/NamespaceArea":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_C1AFE9C2957B3E3D3FE1B5D9DF3D033F73BA72F3.js?root=*Namespace/NamespaceArea"],"*Namespace/Create/Models/CreateModel":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_CCBF722BBE5F39BC06A81D6ED8E030BCF18EF6F2.js?root=*Namespace/Create/Models/CreateModel"],"*Namespace/Browse/ViewModels/TopicAssetTypeViewModel":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_C08526F75B34101C1A750C0752E81E560A024F9A.js?root=*Namespace/Browse/ViewModels/TopicAssetTypeViewModel"],"*Namespace/Browse/ViewModels/ResourceTypeService":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_27CD05B99643ED23BB6A66AF2C13247CF29B4630.js?root=*Namespace/Browse/ViewModels/ResourceTypeService"],"*Namespace/Browse/ViewModels/QueueAssetTypeViewModel":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_33CE39651DF5F3210C612922D442A686482D969F.js?root=*Namespace/Browse/ViewModels/QueueAssetTypeViewModel"],"*Namespace/Browse/ViewModels/AssetTypeViewModel":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_E1B7796BF0CF6EF98D65EDE4770C73ADA36ED804.js?root=*Namespace/Browse/ViewModels/AssetTypeViewModel"]}},"fxRequireConfig":{"bundles":{"*ServieBusExtension":["ClientResources"],"*0_generated/Manifest":["_generated/Manifest"]},"shim":{"_generated/Manifest":["**Shim_//main.servicebus.ext.azure.com/Content/Dynamic/TypeMetadataScript_0560AC00ECF6B7F530CED8E89BAC07A931017A5B"]},"paths":{"**Shim_//main.servicebus.ext.azure.com/Content/Dynamic/TypeMetadataScript_0560AC00ECF6B7F530CED8E89BAC07A931017A5B":["//main.servicebus.ext.azure.com/Content/Dynamic/TypeMetadataScript_0560AC00ECF6B7F530CED8E89BAC07A931017A5B"]}},"prefetchCss":[],"prefetchScripts":["//main.servicebus.ext.azure.com/Content/Dynamic/AmdResourceDefinition_145D0EBB8AA9C8D8308F4F24ED31B1529C73B6E0.js?c1=ja\u0026root=ServieBusExtension","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_BB7B50F3D86905D13FAB9C9002B4F8EB1D84D011.js?root=**0_generated/Manifest","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_0ECDC1032929E8A33DB8BED20217DBC3E8B1037D.js?root=*0_generated/Manifest\u0026emitMap=0","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_639AA7B1CD0E8F2EAA03DE0E5210D2C117950B3D.js?root=*_generated/Microsoft_Azure_Insights/BladeReferences","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_BB5D1E24BD4C7AA0542D94DC70E6CE245CB4B4A8.js?root=*_generated/HubsExtension/BladeReferences","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_1F263614FA67D125B7592D8A45EA07EE9F3CDB40.js?root=**_generated/BladeReferences","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_F5F187BF4CB8F119651018D63905187A78801F1E.js?root=**_generated/Parts/TopicResourcePart","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_566797F303594C815F9E6B537A2BAABEDD083DB0.js?root=*_generated/Parts/TopicResourcePart","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_79A9B3CC316A4095F0601B9DDE6635E5D18B31E5.js?root=*_generated/Parts/ResourcePart","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_F056A2CE66888C9306B3E188FD94A18B522B4767.js?root=*_generated/Parts/QuickStartPart","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_E08A4DC5613C859F50D9F6475FCADEF23CE2DE3E.js?root=*_generated/Parts/QueueResourcePart","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_747B29E063809F88BABA0A89C4E9565B0106EB26.js?root=*_generated/Blades/TsNoticeBlade","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_780CC490CA80F07F0C6C4F40EC8A2D05E7FE6AC0.js?root=**_generated/Blades/TopicSummaryBlade","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_DDCFEFC3918A3B3EC092CE5F33EB614CB7E1866F.js?root=*_generated/Blades/TopicSummaryBlade","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_4193AC2EE116E1B0A101BBF28BB9379A85D15223.js?root=*_generated/Blades/TopicPropertiesBlade","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_7D1ACCD26AC53443AC2077C4E6DD546ECF73BCB3.js?root=**_generated/Blades/TopicListBlade","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_873B75BA3C2B32FFA86846BA7764BADB0AD84022.js?root=*_generated/Blades/TopicListBlade","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_918386BB9F2231D9B6FD04121F314FF86965344D.js?root=*_generated/Blades/SubscriptionPropertiesBlade","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_935D37E9674861C99C7BD152768BACF7C995651F.js?root=*_generated/Blades/SubscriptionListBlade","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_7F75EA1BB29322D6C6B2A5000E9FEBA1F3A29CD5.js?root=*_generated/Blades/ScaleSettingBlade","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_42DA79E4EEA1BC56015403C8E5D7FAF0584D5188.js?root=*_generated/Blades/SasPolicyListBlade","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_3B46A6410001BFAE0E8534FBBF02CB30757D0FC3.js?root=*_generated/Blades/SasPolicyDetailsBlade","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_C569E26397200051113E0864755E933AFF626C2F.js?root=**_generated/Blades/ResourceBlade","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_DECC3CC063DD5D59D3F11DDD29A263B8084FBB25.js?root=*_generated/Blades/ResourceBlade","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_890C53DF00AA8E2901376D0215ADB59E2EF1112A.js?root=*_generated/Blades/QuickStartBlade","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_36BB765711DCD82E840A7294F69DD01AFE2B67F5.js?root=*_generated/Blades/QueueSummaryBlade","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_D8957793C6F993303692F237A6AC170746FEB8E1.js?root=*_generated/Blades/QueuePropertiesBlade","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_F17AEC349274EEDE4491D2A3BB8CA830077A92FA.js?root=*_generated/Blades/QueueListBlade","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_AD18A709EDEBFD915B5D439B1F4929FC89900CDB.js?root=*_generated/Blades/PropertiesBlade","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_A2ED29B369D72AE8E081406DC02012C19A1C754C.js?root=*_generated/Blades/PriceTierSpecPickerBlade","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_1A84320AE281BC747988889EDB369F2A9533B40C.js?root=*_generated/Blades/EventHubNoticeBlade","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_A2F28C3A0C43051FA873D1F657AF4C3D66B83FAE.js?root=*_generated/Blades/DeleteBlade","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_B295120C87FD2EA29262D57473586A4228C0B5AF.js?root=**_generated/Blades/CreateTopicBlade","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_939F2C9640EBC3C44603558234A642B8722AE4C2.js?root=*_generated/Blades/CreateTopicBlade","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_BB4D1E6982905EF9579A94876CD853772FB7D1CC.js?root=*_generated/Blades/CreateSubscriptionBlade","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_25B6DACC7C6D91FD0EFD3EDEA6F5612DB42F2940.js?root=*_generated/Blades/CreateQueueBlade","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_60E77CAFC4496074F3681A5FE3902E3927AD28BE.js?root=*_generated/Blades/CreateBlade","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_227F54950F5B85618557E88815E7E322F6C56B26.js?root=*_generated/Blades/ConvertBlade","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_D52E3C8D4D9CB9C97629A3A949A90A45F3602641.js?root=*_generated/Blades/AddSasPolicyBlade","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_738A4EFC11DCBD071B4C74B6DDA1CEA008609741.js?root=*QuickStart/QuickStartArea","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_C323730B2E4D7FB7A9942690CE8BFFCE1ECACA89.js?root=*Program","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_979D84F41C3BC0970D7E1CB31CE4194AD2EC1CD5.js?root=*Namespace/Summary/ViewModels/ResourceBladeToolbarPartViewModel","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_C1AFE9C2957B3E3D3FE1B5D9DF3D033F73BA72F3.js?root=*Namespace/NamespaceArea","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_CCBF722BBE5F39BC06A81D6ED8E030BCF18EF6F2.js?root=*Namespace/Create/Models/CreateModel","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_C08526F75B34101C1A750C0752E81E560A024F9A.js?root=*Namespace/Browse/ViewModels/TopicAssetTypeViewModel","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_27CD05B99643ED23BB6A66AF2C13247CF29B4630.js?root=*Namespace/Browse/ViewModels/ResourceTypeService","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_33CE39651DF5F3210C612922D442A686482D969F.js?root=*Namespace/Browse/ViewModels/QueueAssetTypeViewModel","//main.servicebus.ext.azure.com/Content/Dynamic/AmdBundleDefinition_E1B7796BF0CF6EF98D65EDE4770C73ADA36ED804.js?root=*Namespace/Browse/ViewModels/AssetTypeViewModel"],"trace":{},"defaultCacheEvictionDelay":null,"cacheVersion":"0","defaultCloudName":"azure","extensionName":"Microsoft_Azure_ServiceBus","traceStr":"","flight":0,"cloudEnvironment":"PROD","cloudEnvironmentSuffix":".servicebus.windows.net","armEndpoint":"https://management.azure.com/","basicBillingGuid":"3c5657c6-28c7-49f0-9456-9a165161954d","standardBillingGuid":"d5034e45-00c1-48c6-8c00-c866f788e033","premiumBillingGuid":"aace4d2f-175a-43e5-8e28-ce76139c6c76","enablePortalLogging":false,"traceAjaxErrors":true,"useFxArmEndpoint":false,"javascriptObjectPropertiesAreEnumerable":true,"enableFastViewModelProxying":false,"frameworkCapabilities":1});</script>
<script>/// <reference path="..\..\Framework\TypeScript\Definitions\Html5.d.ts" />
/// <reference path="..\..\Framework\TypeScript\Definitions\FxEnvironment.d.ts" />
(function () {
    "use strict";
    var global = window;
    var location = global.location;
    var fx = global.fx || {};
    var environment = fx.environment || {};
    var cdnConfig = environment.cdn || {};
    var isCdnEnabled = cdnConfig.enabled;
    var disableCdnQueryStringParameter = cdnConfig.disableParameter;
    var encodeURIComponentFunc = encodeURIComponent;
    var cdnFailedIndexKey = "Cdn_FailedIndex";
    var errorPageUri = cdnConfig.errorPageUri;
    var emptyString = "";
    var slashChar = "/";
    var questionChar = "?";
    var srcAttribute = "src";
    global.fx = fx;
    function getUriWithQueryStringParameter(uri, key, val) {
        uri = uri || emptyString;
        var hashPosition = uri.indexOf("#");
        var uriWithoutHash = uri;
        var hash = emptyString;
        if (hashPosition >= 0) {
            uriWithoutHash = uri.substr(0, hashPosition);
            hash = uri.substr(hashPosition);
        }
        // If the uri is missing a slash after the domain name, we add it
        if (uriWithoutHash.split(slashChar).length === 3) {
            uriWithoutHash += slashChar;
        }
        key = encodeURIComponentFunc(key);
        val = encodeURIComponentFunc(val);
        if (uriWithoutHash) {
            var kvp = key + "=" + val;
            var regex = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
            if (uriWithoutHash.match(regex)) {
                uriWithoutHash = uriWithoutHash.replace(regex, "$1" + kvp + "$2");
            }
            else {
                var separator = uriWithoutHash.indexOf(questionChar) >= 0 ? "&" : questionChar;
                uriWithoutHash += (separator + kvp);
            }
            return uriWithoutHash + hash;
        }
    }
    function disableCdn(qs) {
        var uri = getUriWithQueryStringParameter(location.href, qs, "true");
        global.sessionStorage.setItem(cdnFailedIndexKey, String(cdnConfig.index));
        location.replace(uri);
    }
    function navigateToErrorUri(uri, evt) {
        if (evt) {
            var attr = evt + emptyString;
            var target = evt.target;
            if (target && target.getAttribute) {
                attr = target.getAttribute(srcAttribute);
            }
            uri = getUriWithQueryStringParameter(uri, srcAttribute, attr);
        }
        location.href = uri;
    }
    function handleError(evt) {
        if (disableCdnQueryStringParameter && isCdnEnabled) {
            disableCdn(disableCdnQueryStringParameter);
        }
        else if (errorPageUri) {
            navigateToErrorUri(errorPageUri, evt);
        }
    }
    if (!fx.handleError) {
        // this function name must match the corresponding string in GuardedContentTagGenerator.cs
        fx.handleError = handleError;
    }
})();</script>
    <script>/// <reference path="../Definitions/FxEnvironment.d.ts" />
var MsPortalFx;
(function (MsPortalFx) {
    "use strict";
    var global = window;
    var document = global.document;
    var environment = global.fx.environment;
    var eventMessageConst = "message";
    var trustedParentOrigin = (environment.trustedParentOrigin || "*").toLowerCase();
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise
    // Edge supports setImmediate.
    // Chrome, Edge, Firefox, Opera, Safari support native promise.
    // IE11 and Servo fall back to set timeout.
    var nativePromsie = global.Promise;
    var resolvedPromise = nativePromsie && nativePromsie.resolve();
    var promiseNextTick = resolvedPromise && function (func) {
        resolvedPromise.then(func);
    };
    // setImmediate && Native Promise typically have more aggressive task allocation than timeout. IE11 doesn't have either, fall back to settimeout
    var nextTick = global.setImmediate || promiseNextTick || global.setTimeout;
    function isOriginAllowed(origin) {
        return trustedParentOrigin === "*" || origin.toLowerCase() === trustedParentOrigin;
    }
    function getRootLevelMessage(obj) {
        return JSON.stringify(obj, function (key, value) {
            if (!key ||
                !(value && typeof value === "object")) {
                return value;
            }
            return; // skip all other data
        });
    }
    function getScriptErrorLogMessage(script, evt) {
        return "Error loading script: '" + JSON.stringify(script) + "'. Error: " + getRootLevelMessage(evt);
    }
    var Boot;
    (function (Boot) {
        var currentScript;
        var bootMessageSignature = environment.bootMessageSignature;
        var bootScripts = [];
        function postMessageToParent(kind, data) {
            var message = {
                signature: bootMessageSignature,
                kind: kind,
                data: data
            };
            global.parent.postMessage(message, trustedParentOrigin);
        }
        function runScripts() {
            if (!currentScript && bootScripts.length) {
                var thisScript = createScriptElement();
                var doneFunc = function () {
                    currentScript = null;
                    thisScript.removeEventListener("error", errorFunc);
                    thisScript.removeEventListener("load", doneFunc);
                    nextTick(runScripts);
                };
                var errorFunc = function (evt) {
                    postMessageToParent(2 /* BootError */, {
                        message: getScriptErrorLogMessage(currentScript, evt)
                    });
                    doneFunc();
                };
                thisScript.addEventListener("load", doneFunc, false);
                thisScript.addEventListener("error", errorFunc, false);
                currentScript = bootScripts.shift();
                if (currentScript.kind === 1 /* Text */) {
                    thisScript.text = currentScript.data;
                }
                else {
                    thisScript.src = currentScript.data;
                    if (MsPortalFx && MsPortalFx.Base && MsPortalFx.Base.Constants && environment.extensionName !== MsPortalFx.Base.Constants.Shell) {
                        // When clientOptimizations if off, FxImpl method may not have loaded yet
                        var addScriptErrorListener = FxImpl
                            && FxImpl.Diagnostics
                            && FxImpl.Diagnostics.addScriptErrorListener;
                        if (addScriptErrorListener) {
                            addScriptErrorListener(2 /* BootError */, thisScript, thisScript.src);
                        }
                    }
                }
                document.body.appendChild(thisScript);
            }
        }
        function listener(evt) {
            if (!isOriginAllowed(evt.origin)) {
                return;
            }
            var message = evt.data;
            if (message && message.signature === bootMessageSignature) {
                if (message.kind === 1 /* BootReturn */) {
                    var data = message.data;
                    if (data.stopListening) {
                        global.removeEventListener(eventMessageConst, listener);
                    }
                    bootScripts = bootScripts.concat(data.scripts);
                    runScripts();
                }
            }
        }
        // To obtain any details about an error in a script with a different origin
        // than the global error handler, that script needs to be loaded with
        // crossorigin = "anonymous" and its HTTP response needs to include the
        // header "Access-Control-Allow-Origin: *".
        // If the header is missing the script will fail loading, hence the environment
        // flag.
        // NOTE: Keep in sync with MsPortalFxEnd.ts
        var crossOriginTracesEnabled = environment.isDevelopmentMode || environment.crossOriginTraces;
        function createScriptElement() {
            var thisScript = document.createElement("script");
            if (crossOriginTracesEnabled) {
                thisScript.setAttribute("crossorigin", "anonymous");
            }
            return thisScript;
        }
        Boot.createScriptElement = createScriptElement;
        global.addEventListener(eventMessageConst, listener, false);
        postMessageToParent(0 /* BootGet */, {
            sdkVersion: environment.sdkVersion,
            extVersion: environment.version
        });
    })(Boot = MsPortalFx.Boot || (MsPortalFx.Boot = {}));
    // BUG: 3194645 Change bootstrap to be one event listener that just picks up a script. Remove old bootstrap logic.
    // legacy boot code, remove after boot change transition is complete (sprint 4.15)
    /*interface Window {
        MsPortalFx: {
            Base: {
                Diagnostics: {
                    Log: {
                        writeEntry: Function
                    };
                    LogEntryLevel: {
                        Error: string
                    };
                };
            };
        };
    }*/
    /**
     * Defines the time when scripts need to be loaded in an extension IFrame.
     * This must match the Microsoft.Portal.Framework.ScriptLoadStage enum.
     */
    (function (ScriptLoadStage) {
        /**
         * Indicates that the script is required before manifest load.
         */
        ScriptLoadStage[ScriptLoadStage["PreManifest"] = 0] = "PreManifest";
        /**
         * Indicates that the script is required before extension initialize.
         */
        ScriptLoadStage[ScriptLoadStage["PreInitialize"] = 1] = "PreInitialize";
    })(MsPortalFx.ScriptLoadStage || (MsPortalFx.ScriptLoadStage = {}));
    var ScriptLoadStage = MsPortalFx.ScriptLoadStage;
    var bootScripts = [];
    var preInitExtensionScripts = [];
    var bootGetConst = "BOOTgetScripts;"; // Const must match ExtensionManager.ts of same name.
    var bootReturnConst = "BOOTreturn;"; // Const must match ExtensionManager.ts of same name.
    var logErrorFunc;
    var consoleFunc;
    var bufferedLogMessages = [];
    var hasReceivedScripts;
    var currentScript = null;
    var preInitialize = false;
    var msPortalFx = global.MsPortalFx;
    if (global.console && global.console.error) {
        consoleFunc = function (msg) {
            global.console.error(msg);
        };
    }
    else {
        consoleFunc = function () { };
    }
    function getLoggingFunction(provideFallback) {
        if (provideFallback === void 0) { provideFallback = true; }
        var tempLogFunc = logErrorFunc;
        if (!tempLogFunc) {
            var writeEntry = msPortalFx.Base
                && msPortalFx.Base.Diagnostics
                && msPortalFx.Base.Diagnostics.Log
                && msPortalFx.Base.Diagnostics.Log.writeEntry;
            if (writeEntry) {
                var logLevel = 2 /* Error */; // this is enum, can't use the variable check
                logErrorFunc = function (msg) {
                    writeEntry(logLevel, bootGetConst, msg);
                };
                tempLogFunc = logErrorFunc;
                if (bufferedLogMessages) {
                    bufferedLogMessages.forEach(logErrorFunc);
                    bufferedLogMessages = null;
                }
            }
            else if (provideFallback) {
                if (!bufferedLogMessages) {
                    bufferedLogMessages = [];
                }
                tempLogFunc = function (msg) {
                    consoleFunc(msg);
                    bufferedLogMessages.push(msg);
                };
            }
        }
        return tempLogFunc;
    }
    function logError() {
        var optionalParams = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            optionalParams[_i - 0] = arguments[_i];
        }
        var func = getLoggingFunction();
        var args = Array.prototype.slice.call(arguments);
        func(JSON.stringify(args));
    }
    function flushLogMessages() {
        if (bufferedLogMessages && bufferedLogMessages.length > 0) {
            // flush as side-effect, if Diagnositcs.Log is available
            getLoggingFunction(false);
        }
    }
    function runScripts() {
        flushLogMessages();
        var hasScriptsToLoad = bootScripts.length || (preInitialize && preInitExtensionScripts.length);
        if (hasReceivedScripts && !currentScript && hasScriptsToLoad) {
            if (bootScripts.length) {
                currentScript = bootScripts.shift();
            }
            // If extension has specified pre-init scripts, those should be executed before startinitialize.js which is used to tell shell that all necessary
            // scripts have been loaded and so initialize can be called. So we push the currentScript back and load the preInitExtensionScripts instead.
            if (preInitExtensionScripts.length
                && currentScript
                && currentScript.type === 0 /* Uri */
                && currentScript.data.toLowerCase().indexOf("startinitialize.js") >= 0) {
                bootScripts.unshift(currentScript);
                currentScript = null;
            }
            if (!currentScript) {
                currentScript = preInitExtensionScripts.shift();
            }
            var thisScript = Boot.createScriptElement();
            var doneFunc = function () {
                thisScript.removeEventListener("load", doneFunc);
                thisScript.removeEventListener("error", errorFunc);
                currentScript = null;
                nextTick(runScripts);
            };
            var errorFunc = function (evt) {
                logError(getScriptErrorLogMessage(currentScript, evt));
                global.fx.handleError && global.fx.handleError(evt);
                doneFunc();
            };
            thisScript.addEventListener("load", doneFunc, false);
            thisScript.addEventListener("error", errorFunc, false);
            switch (currentScript.type) {
                case 0 /* Uri */:
                    thisScript.src = currentScript.data;
                    if (MsPortalFx && MsPortalFx.Base && MsPortalFx.Base.Constants && environment.extensionName !== MsPortalFx.Base.Constants.Shell) {
                        // When clientOptimizations if off, FxImpl method may not have loaded yet
                        var addScriptErrorListener = FxImpl
                            && FxImpl.Diagnostics
                            && FxImpl.Diagnostics.addScriptErrorListener;
                        if (addScriptErrorListener) {
                            // MsPortalFx.Boot.MessageKind.BootError is ok to include here (without a null check)
                            // because it is declared right in this file and compiles to a constant
                            addScriptErrorListener(2 /* BootError */, thisScript, thisScript.src);
                        }
                    }
                    break;
                case 1 /* Text */:
                    thisScript.text = currentScript.data;
                    global.setTimeout(function () {
                        currentScript = null;
                        runScripts();
                    }, 0);
                    break;
                default:
                    logError("Unknown ScriptType", currentScript);
                    break;
            }
            document.body.appendChild(thisScript);
        }
    }
    function listener(evt) {
        if (!isOriginAllowed(evt.origin)) {
            return;
        }
        var newElements;
        if (evt.data && evt.data.boot === bootReturnConst) {
            if (evt.data.stopListening) {
                global.removeEventListener(eventMessageConst, listener);
                preInitialize = true;
            }
            newElements = evt.data.scripts.map(function (item) {
                return {
                    type: 0 /* Uri */,
                    data: item
                };
            });
            // prepend the newElements, same as splice(0, 0, ..newElements.)
            bootScripts.unshift.apply(bootScripts, newElements);
            hasReceivedScripts = true;
            runScripts();
        }
    }
    function loadScript(uris, loadStage) {
        if (typeof uris === "string") {
            uris = [uris];
        }
        uris.forEach(function (item) {
            if (loadStage === ScriptLoadStage.PreInitialize) {
                preInitExtensionScripts.push({ type: 0 /* Uri */, data: item });
            }
            else {
                bootScripts.push({ type: 0 /* Uri */, data: item });
            }
        });
        runScripts();
    }
    MsPortalFx.loadScript = loadScript;
    function loadScriptText(text, loadStage) {
        if (loadStage === ScriptLoadStage.PreInitialize) {
            preInitExtensionScripts.push({ type: 1 /* Text */, data: text });
        }
        else {
            bootScripts.push({ type: 1 /* Text */, data: text });
        }
        runScripts();
    }
    MsPortalFx.loadScriptText = loadScriptText;
    global.addEventListener(eventMessageConst, listener, false);
})(MsPortalFx || (MsPortalFx = {}));
var FxImpl;
(function (FxImpl) {
    "use strict";
    var global = window;
    var environment = global.fx.environment;
    var bootGetConst = "BOOTgetScripts;"; // Const must match ExtensionManager.ts of same name.
    function startBoot() {
        global.parent.postMessage({
            boot: bootGetConst,
            bootVersion: 3,
            sdkVersion: environment.sdkVersion,
            extVersion: environment.version
        }, environment.trustedParentOrigin);
    }
    FxImpl.startBoot = startBoot;
})(FxImpl || (FxImpl = {}))</script>
</body>
</html>
