
<!DOCTYPE html>
<html manifest="https://main.iothub.ext.azure.com/?feature.appcache=true&amp;l=ja.ja">
<head>
    <title>IotExtension</title>
    
<meta charset='utf-8' />
<meta http-equiv='X-UA-Compatible' content='IE=edge' />
<meta name='msapplication-config' content='none' />
<link rel='icon' type='image/x-icon' href='/favicon.ico' />
<link rel='shortcut icon' type='image/x-icon' href='/favicon.ico' />
<meta name='robots' content='noindex, nofollow' />

</head>
<body>
    <script>/// <reference path="../Definitions/FxEnvironment.d.ts" />
/* tslint:disable:no-unused-expression */
(function (input) {
    "use strict";
    var global = window;
    var fx = global.fx;
    if (!fx) {
        global.fx = fx = {};
    }
    var env = fx.environment;
    if (typeof input === "string") {
        input = JSON.parse(input);
    }
    if (!env) {
        env = fx.environment = input;
    }
    else {
        Object.keys(input).forEach(function (prop) {
            if (env[prop] === undefined) {
                env[prop] = input[prop];
            }
        });
    }
    // inject session id from the hash if it wasn't already defined
    if (!env.sessionId) {
        var hash = global.location.hash || "";
        var qIndex = hash.indexOf("?");
        if (qIndex === -1) {
            qIndex = hash.length;
        }
        env.sessionId = hash.substring(1, qIndex);
    }
})({"pageVersion":"0.1","sdkVersion":"5.0.302.777 (production_sdk#2594372.170605-1532)","version":"0.1","applicationPath":"/","bootMessageSignature":"###BOOT###","bootGetConst":"BOOTgetScripts;","bootReturnConst":"BOOTreturn;","cdn":{"disableParameter":"nocdn","enabled":true,"errorPageUri":"","forceDisable":false,"index":-1,"indexParameter":"cdnIndex","forceIndex":null,"bundling":"Default"},"clientTraceUri":"/api/ClientTrace","contentLocations":"None","contentUriBasePath":"/","contentVersionToken":"0.1","effectiveLocale":"ja.ja","errorPageUri":"/Error","extensionFlags":{},"features":{},"query":{"region":"japaneast","cacheVersion":"0","defaultCloudName":"azure","extensionName":"Microsoft_Azure_IotHub","traceStr":"","sessionId":"b7bf5a883b164f6fb2dd3768750a1681","pageVersion":"0.1","l":"ja.ja","trustedAuthority":"portal.azure.com"},"isDevelopmentMode":false,"isRtl":false,"telemetryUri":"/api/Telemetry","trustedParentOrigin":"https://portal.azure.com","userTypeHint":"","versionedContentRoots":["/content","/scripts"],"crossOriginTraces":true,"requireConfig":{"baseUrl":"/Content/0.1/min/Scripts","waitSeconds":30.0,"deps":["_generated/Manifest"],"bundles":{"*SamplesExtension":["ClientResources"],"*_generated/Manifest":["_generated/Manifest"]},"shim":{"_generated/Manifest":["**Shim_//main.iothub.ext.azure.com/Content/Dynamic/TypeMetadataScript_366BD253D360F17D887CE0893509EFC85E2CA81A"]},"paths":{"**Shim_//main.iothub.ext.azure.com/Content/Dynamic/TypeMetadataScript_366BD253D360F17D887CE0893509EFC85E2CA81A":["//main.iothub.ext.azure.com/Content/Dynamic/TypeMetadataScript_366BD253D360F17D887CE0893509EFC85E2CA81A"],"*SamplesExtension":["//main.iothub.ext.azure.com/Content/Dynamic/AmdResourceDefinition_B25CCF22E2795ACDA0AF0F2DEED2003D85760810.js?c1=ja\u0026root=SamplesExtension"],"**_generated/Parts/ResourcePart":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_AB8AC143492354D9228F20BC2582523C3E97C308.js?root=**_generated/Parts/ResourcePart"],"*_generated/Parts/ResourcePart":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_D455A93CC79033AE52E6338081787FD835D8EAA8.js?root=*_generated/Parts/ResourcePart"],"*_generated/Parts/QuotaMetricsPart":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_EB1E93616041D2B00E3F3F27D3587F4872C1386C.js?root=*_generated/Parts/QuotaMetricsPart"],"*_generated/Parts/QuickStartPart":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_2BCFCC3363B1F9B3CCF999B62FF31776A8994592.js?root=*_generated/Parts/QuickStartPart"],"*_generated/Parts/MonitoringPart":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_BD4DCFEAC32EF65240E60BD727DA015236B154C7.js?root=*_generated/Parts/MonitoringPart"],"*_generated/Microsoft_Azure_Storage/BladeReferences":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_BAD3D8BAD7B0380E61D4947F7A9426C93D1F8808.js?root=*_generated/Microsoft_Azure_Storage/BladeReferences"],"*_generated/Microsoft_Azure_Insights/BladeReferences":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_27A5006DE798F0820C1058FB3B4553ADF2240B3E.js?root=*_generated/Microsoft_Azure_Insights/BladeReferences"],"*_generated/Manifest":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_4EF8B5800344504E3D75B56C07C65FD1389A00B1.js?root=*_generated/Manifest\u0026emitMap=0"],"*_generated/HubsExtension/BladeReferences":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_BB5D1E24BD4C7AA0542D94DC70E6CE245CB4B4A8.js?root=*_generated/HubsExtension/BladeReferences"],"**_generated/Blades/SettingsBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_0FA470DDDDE5C5EF5DE5D2C4FAC8428D9FF0F59C.js?root=**_generated/Blades/SettingsBlade"],"*_generated/Blades/SettingsBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_4E77EB6DB8B96A8A4D7DF912DB2FBA07B4BBDEED.js?root=*_generated/Blades/SettingsBlade"],"**_generated/Blades/RoutesTestAllRulesBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_00CBEB8895024C256EAFF3ED3E30FC3D2DB6508F.js?root=**_generated/Blades/RoutesTestAllRulesBlade"],"*_generated/Blades/RoutesTestAllRulesBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_D8EF77700F4FA9D737BDDA3B95414D80D5B35BC1.js?root=*_generated/Blades/RoutesTestAllRulesBlade"],"*_generated/Blades/RoutesCreateBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_5D238597170BF6F39F8D3FD0249BEBB86D04D5A4.js?root=*_generated/Blades/RoutesCreateBlade"],"*_generated/Blades/RoutesCollectionBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_5660DA0434D6513CEACA391E181648C0DD209302.js?root=*_generated/Blades/RoutesCollectionBlade"],"*_generated/Blades/ResourceNotFoundBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_4A0CE737557CAAA31FF9B516E3F98526FFC7FFA3.js?root=*_generated/Blades/ResourceNotFoundBlade"],"*_generated/Blades/QuickStartBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_1F8112248824D2148B018D29839E7E6D71BAAACB.js?root=*_generated/Blades/QuickStartBlade"],"*_generated/Blades/QueryResultBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_ADFA23F73FC05B837E2A57789647638B5E8768F9.js?root=*_generated/Blades/QueryResultBlade"],"*_generated/Blades/QueryExplorerBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_3A50064E777DA06BEE827AA319CDBB827141851B.js?root=*_generated/Blades/QueryExplorerBlade"],"**_generated/Blades/OpsMonSettingsBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_43FDECF454E0C13014E77EAD2CF09F513365A8EB.js?root=**_generated/Blades/OpsMonSettingsBlade"],"*_generated/Blades/OpsMonSettingsBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_B77EDED1D94E20DBFD3B179A411D3E2AE4215E81.js?root=*_generated/Blades/OpsMonSettingsBlade"],"*_generated/Blades/NoResourceGroupBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_8727EA71D5DCDD4C7A54A7429CB4425CFF70C27C.js?root=*_generated/Blades/NoResourceGroupBlade"],"**_generated/Blades/MessagingEventsBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_39ED3491BED824FFCE60E650E0168DB7E37FA267.js?root=**_generated/Blades/MessagingEventsBlade"],"*_generated/Blades/MessagingEventsBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_3FDCCBD0BAFE2B819683E899DC12C7F050F0A080.js?root=*_generated/Blades/MessagingEventsBlade"],"*_generated/Blades/MessagingBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_6A47B903BB8CF39176F78DD392CDCB4719DA94BC.js?root=*_generated/Blades/MessagingBlade"],"*_generated/Blades/IpFilterBladeTmplViewModel":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_6D7E2763353ECE7220A60D55769AB31FBFB1657A.js?root=*_generated/Blades/IpFilterBladeTmplViewModel"],"*_generated/Blades/IotHubSpecPickerBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_7FFC8694216249DCE673AC3FA863F2A495BC228F.js?root=*_generated/Blades/IotHubSpecPickerBlade"],"*_generated/Blades/IotHubPricingAndScaleBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_F9BB177354A72514A5870283FCB001D9C9DFC12C.js?root=*_generated/Blades/IotHubPricingAndScaleBlade"],"**_generated/Blades/IotHubKeysBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_189A9BA299DD95C8A49357D7F57C1EE337E9F7A8.js?root=**_generated/Blades/IotHubKeysBlade"],"*_generated/Blades/IotHubKeysBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_B518A815054710FFD6FCAFDB1B038C3EF215B479.js?root=*_generated/Blades/IotHubKeysBlade"],"*_generated/Blades/IotHubDeviceGridBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_DBE93F5E096EF31BD931F94819C24F7A97691CC8.js?root=*_generated/Blades/IotHubDeviceGridBlade"],"*_generated/Blades/IotHubBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_501471399BC8B71F0E3BBB982EE3FDA390601229.js?root=*_generated/Blades/IotHubBlade"],"*_generated/Blades/GridColumns":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_CCBD2F1AC61468D88AF13D0AEAAC50256B6D495E.js?root=*_generated/Blades/GridColumns"],"*_generated/Blades/FileUploadBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_45549C2605D56BB396AECCCBBBB4923F4EE991D2.js?root=*_generated/Blades/FileUploadBlade"],"**_generated/Blades/EndpointsAssociationCreateBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_562BCAF024C10F7793E68E2610620D1F2F6402DD.js?root=**_generated/Blades/EndpointsAssociationCreateBlade"],"*_generated/Blades/EndpointsAssociationCreateBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_0EEF65CDEFCF4171646272A89D1F9E366C5C968D.js?root=*_generated/Blades/EndpointsAssociationCreateBlade"],"*_generated/Blades/EndpointsAssociationBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_9CFBCD15F36266F20D7E6A4BC081C8A3594DB5A5.js?root=*_generated/Blades/EndpointsAssociationBlade"],"**_generated/Blades/EditIpFilterBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_761A514591F904F3DCA2024587E722DC52BD4A93.js?root=**_generated/Blades/EditIpFilterBlade"],"*_generated/Blades/EditIpFilterBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_B5086B80995CAA5EBD405A3D817EBAFF641E58B8.js?root=*_generated/Blades/EditIpFilterBlade"],"**_generated/Blades/EditIotHubKeyBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_2930EF3DC673524B03D8F0316B03F9E34192EB5C.js?root=**_generated/Blades/EditIotHubKeyBlade"],"*_generated/Blades/EditIotHubKeyBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_12875E0D0EB1C554C535CB3E4EDCCDE94957E8BA.js?root=*_generated/Blades/EditIotHubKeyBlade"],"*_generated/Blades/DisabledNoticeBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_F3422D96DA1E8596B108B67D08C561355428C2CA.js?root=*_generated/Blades/DisabledNoticeBlade"],"*_generated/Blades/DirectMethodsBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_FB754A0A94C90258697E800108C7E7EE2C6BCB48.js?root=*_generated/Blades/DirectMethodsBlade"],"*_generated/Blades/DeviceTwinDetailsBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_201CF70E8B3897EFF36CDB2383031589AFF0BA88.js?root=*_generated/Blades/DeviceTwinDetailsBlade"],"*_generated/Blades/DeviceDetailsBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_94B26EEBD6ABC121A4C9AC272C35C22E86EE1152.js?root=*_generated/Blades/DeviceDetailsBlade"],"*_generated/Blades/DeleteBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_F885C831FBB986F47C75725EF0DC0607BA50ED27.js?root=*_generated/Blades/DeleteBlade"],"*_generated/Blades/CreateBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_BB936C716B30F73B2668ADCA3C7D37371EB21381.js?root=*_generated/Blades/CreateBlade"],"*_generated/Blades/CloudToDeviceMessageBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_6291A70B6A332172EC9C6B5943B609CD5E3DE06D.js?root=*_generated/Blades/CloudToDeviceMessageBlade"],"*_generated/Blades/AddIpFilterBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_A6874CD3189A14AE104A4328C978F362D6A800D4.js?root=*_generated/Blades/AddIpFilterBlade"],"*_generated/Blades/AddIotHubKeyBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_C73A4C28BA2740C8C84DE8B9E5DE674C86DC9644.js?root=*_generated/Blades/AddIotHubKeyBlade"],"*_generated/Blades/AddDeviceBlade":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_B4D535A63DAEB1A451EF4EBB425E1A5C86ABE304.js?root=*_generated/Blades/AddDeviceBlade"],"*_extensions/Monitoring/Models/SharedEventModels":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_FD1E314B14DFE209ADD675F9F3D415231A4120A5.js?root=*_extensions/Monitoring/Models/SharedEventModels"],"*_extensions/Monitoring/Models/MetricsModels.Public":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_D5642F1C85FB330CFE1A027595BD8E9124F2702A.js?root=*_extensions/Monitoring/Models/MetricsModels.Public"],"*Program":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_D87769E6E06061847CD717281460EBA825E8B39D.js?root=*Program"],"*IotHubBlade/Create/Models/CreateModel":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_9A1D8DBDFBD127E568F7DC51DE0AA2F413E69AB5.js?root=*IotHubBlade/Create/Models/CreateModel"],"*IotHubBlade/Browse/ViewModels/AssetTypeViewModel":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_E1CA08778662F9F2628EC3D601803880240FC491.js?root=*IotHubBlade/Browse/ViewModels/AssetTypeViewModel"],"*IotHubBlade/BladeSections/Security/Models/IotHubKeysCollectionPartModel":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_EC61ABC86B579DA5664C2A730ADF7B375C64B8EF.js?root=*IotHubBlade/BladeSections/Security/Models/IotHubKeysCollectionPartModel"],"*IotHubBlade/BladeSections/Routes/Models/RoutesModel":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_26A49CA1FEA8019E480EF0A7D1E50B21470A3004.js?root=*IotHubBlade/BladeSections/Routes/Models/RoutesModel"],"*IotHubBlade/BladeSections/Endpoints/Models/EndpointsModel":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_1EB21BED23956C1F9EA921FF558B0BE914F63A53.js?root=*IotHubBlade/BladeSections/Endpoints/Models/EndpointsModel"],"*IotHubBlade/BladeSections/Endpoints/Models/EndpointsCollectionModel":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_65B33B7E7848B6CE17605B643801180399C93A14.js?root=*IotHubBlade/BladeSections/Endpoints/Models/EndpointsCollectionModel"],"*IotHubBlade/BladeSections/Endpoints/Data/EndpointsData":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_AC6D8E9CA03190AB69A5E8D165E692491FBB3B70.js?root=*IotHubBlade/BladeSections/Endpoints/Data/EndpointsData"],"*IotHubBlade/BladeSections/DeviceGrid/ViewModels/TwinQueryLanguageDefinition":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_673B776A94C2326598F83DCB21AED49480AEEAD9.js?root=*IotHubBlade/BladeSections/DeviceGrid/ViewModels/TwinQueryLanguageDefinition"],"*IotHubBlade/BladeSections/DeviceGrid/ViewModels/TwinQueryEditorControlViewModel":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_1F070D57640D0B93DB36B263197C175A576EBFE4.js?root=*IotHubBlade/BladeSections/DeviceGrid/ViewModels/TwinQueryEditorControlViewModel"],"*IotHubBlade/BladeSections/DeviceGrid/Models/IotHubDeviceGridCollectionPartModel":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_CFA5BC2DA11D1DD4CAF52E35699C3DC11B4B1B0C.js?root=*IotHubBlade/BladeSections/DeviceGrid/Models/IotHubDeviceGridCollectionPartModel"],"*primaryPartitioning":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_3E59137B5162C8C7A35335C74272A86F8F5CC4AB.js?root=*primaryPartitioning"],"*secondaryPartitioning":["//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_3E59137B5162C8C7A35335C74272A86F8F5CC4AB.js?root=*secondaryPartitioning"]}},"fxRequireConfig":{"bundles":{"*SamplesExtension":["ClientResources"],"*_generated/Manifest":["_generated/Manifest"]},"shim":{"_generated/Manifest":["**Shim_//main.iothub.ext.azure.com/Content/Dynamic/TypeMetadataScript_366BD253D360F17D887CE0893509EFC85E2CA81A"]},"paths":{"**Shim_//main.iothub.ext.azure.com/Content/Dynamic/TypeMetadataScript_366BD253D360F17D887CE0893509EFC85E2CA81A":["//main.iothub.ext.azure.com/Content/Dynamic/TypeMetadataScript_366BD253D360F17D887CE0893509EFC85E2CA81A"]}},"prefetchCss":[],"prefetchScripts":["//main.iothub.ext.azure.com/Content/Dynamic/AmdResourceDefinition_B25CCF22E2795ACDA0AF0F2DEED2003D85760810.js?c1=ja\u0026root=SamplesExtension","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_AB8AC143492354D9228F20BC2582523C3E97C308.js?root=**_generated/Parts/ResourcePart","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_D455A93CC79033AE52E6338081787FD835D8EAA8.js?root=*_generated/Parts/ResourcePart","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_EB1E93616041D2B00E3F3F27D3587F4872C1386C.js?root=*_generated/Parts/QuotaMetricsPart","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_2BCFCC3363B1F9B3CCF999B62FF31776A8994592.js?root=*_generated/Parts/QuickStartPart","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_BD4DCFEAC32EF65240E60BD727DA015236B154C7.js?root=*_generated/Parts/MonitoringPart","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_BAD3D8BAD7B0380E61D4947F7A9426C93D1F8808.js?root=*_generated/Microsoft_Azure_Storage/BladeReferences","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_27A5006DE798F0820C1058FB3B4553ADF2240B3E.js?root=*_generated/Microsoft_Azure_Insights/BladeReferences","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_4EF8B5800344504E3D75B56C07C65FD1389A00B1.js?root=*_generated/Manifest\u0026emitMap=0","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_BB5D1E24BD4C7AA0542D94DC70E6CE245CB4B4A8.js?root=*_generated/HubsExtension/BladeReferences","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_0FA470DDDDE5C5EF5DE5D2C4FAC8428D9FF0F59C.js?root=**_generated/Blades/SettingsBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_4E77EB6DB8B96A8A4D7DF912DB2FBA07B4BBDEED.js?root=*_generated/Blades/SettingsBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_00CBEB8895024C256EAFF3ED3E30FC3D2DB6508F.js?root=**_generated/Blades/RoutesTestAllRulesBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_D8EF77700F4FA9D737BDDA3B95414D80D5B35BC1.js?root=*_generated/Blades/RoutesTestAllRulesBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_5D238597170BF6F39F8D3FD0249BEBB86D04D5A4.js?root=*_generated/Blades/RoutesCreateBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_5660DA0434D6513CEACA391E181648C0DD209302.js?root=*_generated/Blades/RoutesCollectionBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_4A0CE737557CAAA31FF9B516E3F98526FFC7FFA3.js?root=*_generated/Blades/ResourceNotFoundBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_1F8112248824D2148B018D29839E7E6D71BAAACB.js?root=*_generated/Blades/QuickStartBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_ADFA23F73FC05B837E2A57789647638B5E8768F9.js?root=*_generated/Blades/QueryResultBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_3A50064E777DA06BEE827AA319CDBB827141851B.js?root=*_generated/Blades/QueryExplorerBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_43FDECF454E0C13014E77EAD2CF09F513365A8EB.js?root=**_generated/Blades/OpsMonSettingsBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_B77EDED1D94E20DBFD3B179A411D3E2AE4215E81.js?root=*_generated/Blades/OpsMonSettingsBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_8727EA71D5DCDD4C7A54A7429CB4425CFF70C27C.js?root=*_generated/Blades/NoResourceGroupBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_39ED3491BED824FFCE60E650E0168DB7E37FA267.js?root=**_generated/Blades/MessagingEventsBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_3FDCCBD0BAFE2B819683E899DC12C7F050F0A080.js?root=*_generated/Blades/MessagingEventsBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_6A47B903BB8CF39176F78DD392CDCB4719DA94BC.js?root=*_generated/Blades/MessagingBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_6D7E2763353ECE7220A60D55769AB31FBFB1657A.js?root=*_generated/Blades/IpFilterBladeTmplViewModel","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_7FFC8694216249DCE673AC3FA863F2A495BC228F.js?root=*_generated/Blades/IotHubSpecPickerBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_F9BB177354A72514A5870283FCB001D9C9DFC12C.js?root=*_generated/Blades/IotHubPricingAndScaleBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_189A9BA299DD95C8A49357D7F57C1EE337E9F7A8.js?root=**_generated/Blades/IotHubKeysBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_B518A815054710FFD6FCAFDB1B038C3EF215B479.js?root=*_generated/Blades/IotHubKeysBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_DBE93F5E096EF31BD931F94819C24F7A97691CC8.js?root=*_generated/Blades/IotHubDeviceGridBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_501471399BC8B71F0E3BBB982EE3FDA390601229.js?root=*_generated/Blades/IotHubBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_CCBD2F1AC61468D88AF13D0AEAAC50256B6D495E.js?root=*_generated/Blades/GridColumns","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_45549C2605D56BB396AECCCBBBB4923F4EE991D2.js?root=*_generated/Blades/FileUploadBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_562BCAF024C10F7793E68E2610620D1F2F6402DD.js?root=**_generated/Blades/EndpointsAssociationCreateBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_0EEF65CDEFCF4171646272A89D1F9E366C5C968D.js?root=*_generated/Blades/EndpointsAssociationCreateBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_9CFBCD15F36266F20D7E6A4BC081C8A3594DB5A5.js?root=*_generated/Blades/EndpointsAssociationBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_761A514591F904F3DCA2024587E722DC52BD4A93.js?root=**_generated/Blades/EditIpFilterBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_B5086B80995CAA5EBD405A3D817EBAFF641E58B8.js?root=*_generated/Blades/EditIpFilterBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_2930EF3DC673524B03D8F0316B03F9E34192EB5C.js?root=**_generated/Blades/EditIotHubKeyBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_12875E0D0EB1C554C535CB3E4EDCCDE94957E8BA.js?root=*_generated/Blades/EditIotHubKeyBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_F3422D96DA1E8596B108B67D08C561355428C2CA.js?root=*_generated/Blades/DisabledNoticeBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_FB754A0A94C90258697E800108C7E7EE2C6BCB48.js?root=*_generated/Blades/DirectMethodsBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_201CF70E8B3897EFF36CDB2383031589AFF0BA88.js?root=*_generated/Blades/DeviceTwinDetailsBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_94B26EEBD6ABC121A4C9AC272C35C22E86EE1152.js?root=*_generated/Blades/DeviceDetailsBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_F885C831FBB986F47C75725EF0DC0607BA50ED27.js?root=*_generated/Blades/DeleteBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_BB936C716B30F73B2668ADCA3C7D37371EB21381.js?root=*_generated/Blades/CreateBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_6291A70B6A332172EC9C6B5943B609CD5E3DE06D.js?root=*_generated/Blades/CloudToDeviceMessageBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_A6874CD3189A14AE104A4328C978F362D6A800D4.js?root=*_generated/Blades/AddIpFilterBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_C73A4C28BA2740C8C84DE8B9E5DE674C86DC9644.js?root=*_generated/Blades/AddIotHubKeyBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_B4D535A63DAEB1A451EF4EBB425E1A5C86ABE304.js?root=*_generated/Blades/AddDeviceBlade","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_FD1E314B14DFE209ADD675F9F3D415231A4120A5.js?root=*_extensions/Monitoring/Models/SharedEventModels","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_D5642F1C85FB330CFE1A027595BD8E9124F2702A.js?root=*_extensions/Monitoring/Models/MetricsModels.Public","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_D87769E6E06061847CD717281460EBA825E8B39D.js?root=*Program","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_9A1D8DBDFBD127E568F7DC51DE0AA2F413E69AB5.js?root=*IotHubBlade/Create/Models/CreateModel","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_E1CA08778662F9F2628EC3D601803880240FC491.js?root=*IotHubBlade/Browse/ViewModels/AssetTypeViewModel","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_EC61ABC86B579DA5664C2A730ADF7B375C64B8EF.js?root=*IotHubBlade/BladeSections/Security/Models/IotHubKeysCollectionPartModel","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_26A49CA1FEA8019E480EF0A7D1E50B21470A3004.js?root=*IotHubBlade/BladeSections/Routes/Models/RoutesModel","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_1EB21BED23956C1F9EA921FF558B0BE914F63A53.js?root=*IotHubBlade/BladeSections/Endpoints/Models/EndpointsModel","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_65B33B7E7848B6CE17605B643801180399C93A14.js?root=*IotHubBlade/BladeSections/Endpoints/Models/EndpointsCollectionModel","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_AC6D8E9CA03190AB69A5E8D165E692491FBB3B70.js?root=*IotHubBlade/BladeSections/Endpoints/Data/EndpointsData","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_673B776A94C2326598F83DCB21AED49480AEEAD9.js?root=*IotHubBlade/BladeSections/DeviceGrid/ViewModels/TwinQueryLanguageDefinition","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_1F070D57640D0B93DB36B263197C175A576EBFE4.js?root=*IotHubBlade/BladeSections/DeviceGrid/ViewModels/TwinQueryEditorControlViewModel","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_CFA5BC2DA11D1DD4CAF52E35699C3DC11B4B1B0C.js?root=*IotHubBlade/BladeSections/DeviceGrid/Models/IotHubDeviceGridCollectionPartModel","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_3E59137B5162C8C7A35335C74272A86F8F5CC4AB.js?root=*primaryPartitioning","//main.iothub.ext.azure.com/Content/Dynamic/AmdBundleDefinition_3E59137B5162C8C7A35335C74272A86F8F5CC4AB.js?root=*secondaryPartitioning"],"trace":{},"defaultCacheEvictionDelay":null,"cacheVersion":"0","defaultCloudName":"azure","extensionName":"Microsoft_Azure_IotHub","traceStr":"","flight":0,"armEndpoint":"https://management.azure.com/","enablePortalLogging":false,"traceAjaxErrors":false,"useFxArmEndpoint":false,"javascriptObjectPropertiesAreEnumerable":true,"enableFastViewModelProxying":false,"frameworkCapabilities":1});</script>
<script>/// <reference path="..\..\Framework\TypeScript\Definitions\Html5.d.ts" />
/// <reference path="..\..\Framework\TypeScript\Definitions\FxEnvironment.d.ts" />
(function () {
    "use strict";
    var global = window;
    var location = global.location;
    var fx = global.fx || {};
    var environment = fx.environment || {};
    var cdnConfig = environment.cdn || {};
    var isCdnEnabled = cdnConfig.enabled;
    var disableCdnQueryStringParameter = cdnConfig.disableParameter;
    var encodeURIComponentFunc = encodeURIComponent;
    var cdnFailedIndexKey = "Cdn_FailedIndex";
    var errorPageUri = cdnConfig.errorPageUri;
    var emptyString = "";
    var slashChar = "/";
    var questionChar = "?";
    var srcAttribute = "src";
    global.fx = fx;
    function getUriWithQueryStringParameter(uri, key, val) {
        uri = uri || emptyString;
        var hashPosition = uri.indexOf("#");
        var uriWithoutHash = uri;
        var hash = emptyString;
        if (hashPosition >= 0) {
            uriWithoutHash = uri.substr(0, hashPosition);
            hash = uri.substr(hashPosition);
        }
        // If the uri is missing a slash after the domain name, we add it
        if (uriWithoutHash.split(slashChar).length === 3) {
            uriWithoutHash += slashChar;
        }
        key = encodeURIComponentFunc(key);
        val = encodeURIComponentFunc(val);
        if (uriWithoutHash) {
            var kvp = key + "=" + val;
            var regex = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
            if (uriWithoutHash.match(regex)) {
                uriWithoutHash = uriWithoutHash.replace(regex, "$1" + kvp + "$2");
            }
            else {
                var separator = uriWithoutHash.indexOf(questionChar) >= 0 ? "&" : questionChar;
                uriWithoutHash += (separator + kvp);
            }
            return uriWithoutHash + hash;
        }
    }
    function disableCdn(qs) {
        var uri = getUriWithQueryStringParameter(location.href, qs, "true");
        global.sessionStorage.setItem(cdnFailedIndexKey, String(cdnConfig.index));
        location.replace(uri);
    }
    function navigateToErrorUri(uri, evt) {
        if (evt) {
            var attr = evt + emptyString;
            var target = evt.target;
            if (target && target.getAttribute) {
                attr = target.getAttribute(srcAttribute);
            }
            uri = getUriWithQueryStringParameter(uri, srcAttribute, attr);
        }
        location.href = uri;
    }
    function handleError(evt) {
        if (disableCdnQueryStringParameter && isCdnEnabled) {
            disableCdn(disableCdnQueryStringParameter);
        }
        else if (errorPageUri) {
            navigateToErrorUri(errorPageUri, evt);
        }
    }
    if (!fx.handleError) {
        // this function name must match the corresponding string in GuardedContentTagGenerator.cs
        fx.handleError = handleError;
    }
})();</script>
    <script>/// <reference path="../Definitions/FxEnvironment.d.ts" />
var MsPortalFx;
(function (MsPortalFx) {
    "use strict";
    var global = window;
    var document = global.document;
    var environment = global.fx.environment;
    var eventMessageConst = "message";
    var trustedParentOrigin = (environment.trustedParentOrigin || "*").toLowerCase();
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise
    // Edge supports setImmediate.
    // Chrome, Edge, Firefox, Opera, Safari support native promise.
    // IE11 and Servo fall back to set timeout.
    var nativePromsie = global.Promise;
    var resolvedPromise = nativePromsie && nativePromsie.resolve();
    var promiseNextTick = resolvedPromise && function (func) {
        resolvedPromise.then(func);
    };
    // setImmediate && Native Promise typically have more aggressive task allocation than timeout. IE11 doesn't have either, fall back to settimeout
    var nextTick = global.setImmediate || promiseNextTick || global.setTimeout;
    function isOriginAllowed(origin) {
        return trustedParentOrigin === "*" || origin.toLowerCase() === trustedParentOrigin;
    }
    function getRootLevelMessage(obj) {
        return JSON.stringify(obj, function (key, value) {
            if (!key ||
                !(value && typeof value === "object")) {
                return value;
            }
            return; // skip all other data
        });
    }
    function getScriptErrorLogMessage(script, evt) {
        return "Error loading script: '" + JSON.stringify(script) + "'. Error: " + getRootLevelMessage(evt);
    }
    var Boot;
    (function (Boot) {
        var currentScript;
        var bootMessageSignature = environment.bootMessageSignature;
        var bootScripts = [];
        function postMessageToParent(kind, data) {
            var message = {
                signature: bootMessageSignature,
                kind: kind,
                data: data
            };
            global.parent.postMessage(message, trustedParentOrigin);
        }
        function runScripts() {
            if (!currentScript && bootScripts.length) {
                var thisScript = createScriptElement();
                var doneFunc = function () {
                    currentScript = null;
                    thisScript.removeEventListener("error", errorFunc);
                    thisScript.removeEventListener("load", doneFunc);
                    nextTick(runScripts);
                };
                var errorFunc = function (evt) {
                    postMessageToParent(2 /* BootError */, {
                        message: getScriptErrorLogMessage(currentScript, evt)
                    });
                    doneFunc();
                };
                thisScript.addEventListener("load", doneFunc, false);
                thisScript.addEventListener("error", errorFunc, false);
                currentScript = bootScripts.shift();
                if (currentScript.kind === 1 /* Text */) {
                    thisScript.text = currentScript.data;
                }
                else {
                    thisScript.src = currentScript.data;
                    if (MsPortalFx && MsPortalFx.Base && MsPortalFx.Base.Constants && environment.extensionName !== MsPortalFx.Base.Constants.Shell) {
                        // When clientOptimizations if off, FxImpl method may not have loaded yet
                        var addScriptErrorListener = FxImpl
                            && FxImpl.Diagnostics
                            && FxImpl.Diagnostics.addScriptErrorListener;
                        if (addScriptErrorListener) {
                            addScriptErrorListener(2 /* BootError */, thisScript, thisScript.src);
                        }
                    }
                }
                document.body.appendChild(thisScript);
            }
        }
        function listener(evt) {
            if (!isOriginAllowed(evt.origin)) {
                return;
            }
            var message = evt.data;
            if (message && message.signature === bootMessageSignature) {
                if (message.kind === 1 /* BootReturn */) {
                    var data = message.data;
                    if (data.stopListening) {
                        global.removeEventListener(eventMessageConst, listener);
                    }
                    bootScripts = bootScripts.concat(data.scripts);
                    runScripts();
                }
            }
        }
        // To obtain any details about an error in a script with a different origin
        // than the global error handler, that script needs to be loaded with
        // crossorigin = "anonymous" and its HTTP response needs to include the
        // header "Access-Control-Allow-Origin: *".
        // If the header is missing the script will fail loading, hence the environment
        // flag.
        // NOTE: Keep in sync with MsPortalFxEnd.ts
        var crossOriginTracesEnabled = environment.isDevelopmentMode || environment.crossOriginTraces;
        function createScriptElement() {
            var thisScript = document.createElement("script");
            if (crossOriginTracesEnabled) {
                thisScript.setAttribute("crossorigin", "anonymous");
            }
            return thisScript;
        }
        Boot.createScriptElement = createScriptElement;
        global.addEventListener(eventMessageConst, listener, false);
        postMessageToParent(0 /* BootGet */, {
            sdkVersion: environment.sdkVersion,
            extVersion: environment.version
        });
    })(Boot = MsPortalFx.Boot || (MsPortalFx.Boot = {}));
    // BUG: 3194645 Change bootstrap to be one event listener that just picks up a script. Remove old bootstrap logic.
    // legacy boot code, remove after boot change transition is complete (sprint 4.15)
    /*interface Window {
        MsPortalFx: {
            Base: {
                Diagnostics: {
                    Log: {
                        writeEntry: Function
                    };
                    LogEntryLevel: {
                        Error: string
                    };
                };
            };
        };
    }*/
    /**
     * Defines the time when scripts need to be loaded in an extension IFrame.
     * This must match the Microsoft.Portal.Framework.ScriptLoadStage enum.
     */
    (function (ScriptLoadStage) {
        /**
         * Indicates that the script is required before manifest load.
         */
        ScriptLoadStage[ScriptLoadStage["PreManifest"] = 0] = "PreManifest";
        /**
         * Indicates that the script is required before extension initialize.
         */
        ScriptLoadStage[ScriptLoadStage["PreInitialize"] = 1] = "PreInitialize";
    })(MsPortalFx.ScriptLoadStage || (MsPortalFx.ScriptLoadStage = {}));
    var ScriptLoadStage = MsPortalFx.ScriptLoadStage;
    var bootScripts = [];
    var preInitExtensionScripts = [];
    var bootGetConst = "BOOTgetScripts;"; // Const must match ExtensionManager.ts of same name.
    var bootReturnConst = "BOOTreturn;"; // Const must match ExtensionManager.ts of same name.
    var logErrorFunc;
    var consoleFunc;
    var bufferedLogMessages = [];
    var hasReceivedScripts;
    var currentScript = null;
    var preInitialize = false;
    var msPortalFx = global.MsPortalFx;
    if (global.console && global.console.error) {
        consoleFunc = function (msg) {
            global.console.error(msg);
        };
    }
    else {
        consoleFunc = function () { };
    }
    function getLoggingFunction(provideFallback) {
        if (provideFallback === void 0) { provideFallback = true; }
        var tempLogFunc = logErrorFunc;
        if (!tempLogFunc) {
            var writeEntry = msPortalFx.Base
                && msPortalFx.Base.Diagnostics
                && msPortalFx.Base.Diagnostics.Log
                && msPortalFx.Base.Diagnostics.Log.writeEntry;
            if (writeEntry) {
                var logLevel = 2 /* Error */; // this is enum, can't use the variable check
                logErrorFunc = function (msg) {
                    writeEntry(logLevel, bootGetConst, msg);
                };
                tempLogFunc = logErrorFunc;
                if (bufferedLogMessages) {
                    bufferedLogMessages.forEach(logErrorFunc);
                    bufferedLogMessages = null;
                }
            }
            else if (provideFallback) {
                if (!bufferedLogMessages) {
                    bufferedLogMessages = [];
                }
                tempLogFunc = function (msg) {
                    consoleFunc(msg);
                    bufferedLogMessages.push(msg);
                };
            }
        }
        return tempLogFunc;
    }
    function logError() {
        var optionalParams = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            optionalParams[_i - 0] = arguments[_i];
        }
        var func = getLoggingFunction();
        var args = Array.prototype.slice.call(arguments);
        func(JSON.stringify(args));
    }
    function flushLogMessages() {
        if (bufferedLogMessages && bufferedLogMessages.length > 0) {
            // flush as side-effect, if Diagnositcs.Log is available
            getLoggingFunction(false);
        }
    }
    function runScripts() {
        flushLogMessages();
        var hasScriptsToLoad = bootScripts.length || (preInitialize && preInitExtensionScripts.length);
        if (hasReceivedScripts && !currentScript && hasScriptsToLoad) {
            if (bootScripts.length) {
                currentScript = bootScripts.shift();
            }
            // If extension has specified pre-init scripts, those should be executed before startinitialize.js which is used to tell shell that all necessary
            // scripts have been loaded and so initialize can be called. So we push the currentScript back and load the preInitExtensionScripts instead.
            if (preInitExtensionScripts.length
                && currentScript
                && currentScript.type === 0 /* Uri */
                && currentScript.data.toLowerCase().indexOf("startinitialize.js") >= 0) {
                bootScripts.unshift(currentScript);
                currentScript = null;
            }
            if (!currentScript) {
                currentScript = preInitExtensionScripts.shift();
            }
            var thisScript = Boot.createScriptElement();
            var doneFunc = function () {
                thisScript.removeEventListener("load", doneFunc);
                thisScript.removeEventListener("error", errorFunc);
                currentScript = null;
                nextTick(runScripts);
            };
            var errorFunc = function (evt) {
                logError(getScriptErrorLogMessage(currentScript, evt));
                global.fx.handleError && global.fx.handleError(evt);
                doneFunc();
            };
            thisScript.addEventListener("load", doneFunc, false);
            thisScript.addEventListener("error", errorFunc, false);
            switch (currentScript.type) {
                case 0 /* Uri */:
                    thisScript.src = currentScript.data;
                    if (MsPortalFx && MsPortalFx.Base && MsPortalFx.Base.Constants && environment.extensionName !== MsPortalFx.Base.Constants.Shell) {
                        // When clientOptimizations if off, FxImpl method may not have loaded yet
                        var addScriptErrorListener = FxImpl
                            && FxImpl.Diagnostics
                            && FxImpl.Diagnostics.addScriptErrorListener;
                        if (addScriptErrorListener) {
                            // MsPortalFx.Boot.MessageKind.BootError is ok to include here (without a null check)
                            // because it is declared right in this file and compiles to a constant
                            addScriptErrorListener(2 /* BootError */, thisScript, thisScript.src);
                        }
                    }
                    break;
                case 1 /* Text */:
                    thisScript.text = currentScript.data;
                    global.setTimeout(function () {
                        currentScript = null;
                        runScripts();
                    }, 0);
                    break;
                default:
                    logError("Unknown ScriptType", currentScript);
                    break;
            }
            document.body.appendChild(thisScript);
        }
    }
    function listener(evt) {
        if (!isOriginAllowed(evt.origin)) {
            return;
        }
        var newElements;
        if (evt.data && evt.data.boot === bootReturnConst) {
            if (evt.data.stopListening) {
                global.removeEventListener(eventMessageConst, listener);
                preInitialize = true;
            }
            newElements = evt.data.scripts.map(function (item) {
                return {
                    type: 0 /* Uri */,
                    data: item
                };
            });
            // prepend the newElements, same as splice(0, 0, ..newElements.)
            bootScripts.unshift.apply(bootScripts, newElements);
            hasReceivedScripts = true;
            runScripts();
        }
    }
    function loadScript(uris, loadStage) {
        if (typeof uris === "string") {
            uris = [uris];
        }
        uris.forEach(function (item) {
            if (loadStage === ScriptLoadStage.PreInitialize) {
                preInitExtensionScripts.push({ type: 0 /* Uri */, data: item });
            }
            else {
                bootScripts.push({ type: 0 /* Uri */, data: item });
            }
        });
        runScripts();
    }
    MsPortalFx.loadScript = loadScript;
    function loadScriptText(text, loadStage) {
        if (loadStage === ScriptLoadStage.PreInitialize) {
            preInitExtensionScripts.push({ type: 1 /* Text */, data: text });
        }
        else {
            bootScripts.push({ type: 1 /* Text */, data: text });
        }
        runScripts();
    }
    MsPortalFx.loadScriptText = loadScriptText;
    global.addEventListener(eventMessageConst, listener, false);
})(MsPortalFx || (MsPortalFx = {}));
var FxImpl;
(function (FxImpl) {
    "use strict";
    var global = window;
    var environment = global.fx.environment;
    var bootGetConst = "BOOTgetScripts;"; // Const must match ExtensionManager.ts of same name.
    function startBoot() {
        global.parent.postMessage({
            boot: bootGetConst,
            bootVersion: 3,
            sdkVersion: environment.sdkVersion,
            extVersion: environment.version
        }, environment.trustedParentOrigin);
    }
    FxImpl.startBoot = startBoot;
})(FxImpl || (FxImpl = {}))</script>
</body>
</html>
